[{"path":"https://jdberson.github.io/dwcPrepare/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 dwcPrepare authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/articles/dwcPrepare.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"dwcPrepare","text":"vignette shows use dwcPrepare prepare biodiversity data use Darwin Core terms. Currently, number Darwin Core Event Location terms supported package, calculated two wrapper functions dwc_Event() dwc_Location(). think useful part package generate Darwin Core Location terms require level ‘calculation’. example, coordinateUncertaintyInMeters text Darwin Core locality term. functions package can take data single location / event directly part arguments. However, mostly spreadsheet multiple locations / events wish format Darwin Core terms. following examples show use dwcPrepare dplyr::mutate() case multiple locations / events. Please see individual help files examples single location / event.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/articles/dwcPrepare.html","id":"darwin-core-location-terms","dir":"Articles","previous_headings":"","what":"Darwin Core Location terms","title":"dwcPrepare","text":"First let’s walk generating Darwin Core Location terms. Note, small number locations, may wish use online Georeferencing Calculator (Wieczorek Wieczorek 2021). options provide , including calculating uncertainty unknown datum. relied heavily calculator associated documentation writing package. Output calculator can formatted use R using dwc_format_gco() function.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/articles/dwcPrepare.html","id":"load-packages","dir":"Articles","previous_headings":"Darwin Core Location terms","what":"Load packages","title":"dwcPrepare","text":"","code":"library(dwcPrepare) library(dplyr)"},{"path":"https://jdberson.github.io/dwcPrepare/articles/dwcPrepare.html","id":"prepare-raw-data","dir":"Articles","previous_headings":"Darwin Core Location terms","what":"Prepare raw data","title":"dwcPrepare","text":"dwcPrepare comes small mock data set - Let’s load data take quick look. see data include latitude longitude three formats: decimal degrees (_dd), degrees minutes seconds (_dms) degrees decimal minutes (_ddm). three formats supported dwcPrepare, uses parzer R package convert coordinates decimal degrees needed. included three formats users can choose format use trying functions. choose degrees minutes seconds vignette, ’ll remove unnecessary columns:","code":"data(\"thylacine_data\")  thylacine_data #> # A tibble: 8 × 13 #>   site   trap     date_trap_setup   date_trap_collected longitude_dd latitude_dd #>   <chr>  <chr>    <chr>             <chr>                      <dbl>       <dbl> #> 1 Sumac  Sumac 1  05/09/2022 10:32… 06/09/2022 12:24:00         145.       -41.2 #> 2 Sumac  Sumac 2  05/09/2022 12:15… 06/09/2022 14:57:00         145.       -41.2 #> 3 Sumac  Sumac 1  05/10/2022 08:23… 06/10/2022 0:00:00          145.       -41.2 #> 4 Sumac  Sumac 2  05/10/2022 10:14… 06/10/2022 10:29:00         145.       -41.2 #> 5 Picton Picton 1 10/09/2022 10:32… 11/09/2022 12:24:00         147.       -43.3 #> 6 Picton Picton 2 10/09/2022 12:15… 11/09/2022 14:57:00         147.       -43.2 #> 7 Picton Picton 1 10/10/2022 0:00:… 11/10/2022 08:46:00         147.       -43.3 #> 8 Picton Picton 2 10/10/2022 10:14… 11/10/2022 10:29:00         147.       -43.2 #> # ℹ 7 more variables: longitude_dms <chr>, latitude_dms <chr>, #> #   longitude_ddm <chr>, latitude_ddm <chr>, gps_uncertainty <dbl>, #> #   species <chr>, count <dbl> # see ?thylacine_data for more information thylacine_data <-   thylacine_data |>   select(-c(longitude_dd:latitude_dms))"},{"path":"https://jdberson.github.io/dwcPrepare/articles/dwcPrepare.html","id":"location-terms-step-by-step","dir":"Articles","previous_headings":"Darwin Core Location terms","what":"Location terms step-by-step","title":"dwcPrepare","text":"can now go building location terms step step. First, use dwc_coordinates() checks, get longitude latitude right format, record basic information: Two things note . One dwc_coordinates() called inside dplyr::mutate(). , like , tibble::tibble() returned dwcPrepare function, need specify column name within dplyr::mutate(). However, single vector returned, column name needs specified (see next code chunk). thing note giving strings verbatimCoordinateSystem verbatimSRS, telling dwc_coordinates() values apply rows dataframe. Next calculate precision coordinates: now information need calculate coordinate uncertainty meters: Next, shape file country, countryCode, stateProvince county information area interest, can use dwc_country_to_county() assign values points. dwcPrepare includes shape file area mock data collected. Warning: dwc_country_to_county() function differs dwcPrepare functions two ways. First, wrapped dplyr::mutate() applying dataframe. Also, column names given strings. may update future version package. Finally, useful feature dwcPrepare providing information can used Darwin Core locality field using dwc_locality(). function require sf POINT object includes locality names longitude latitude area interest. dwcPrepare comes object Australian localities (locality_data_aus()).","code":"thylacine_data_a <-   thylacine_data |>   mutate(     dwc_coordinates(       longitude = longitude_ddm,       latitude = latitude_ddm,       verbatimCoordinateSystem = \"degrees decimal minutes\",       verbatimSRS = \"EPSG:4326\"     )   ) thylacine_data_b <-   thylacine_data_a |>   mutate(     coordinatePrecision = dwc_coordinatePrecision(       verbatimLatitude = verbatimLatitude,       verbatimLongitude = verbatimLongitude,       verbatimCoordinateSystem = verbatimCoordinateSystem     )   ) thylacine_data_c <-   thylacine_data_b |>   mutate(     coordinateUncertaintyInMeters = dwc_coordinateUncertaintyInMeters(       decimalLatitude = decimalLatitude,       coordinatePrecision = coordinatePrecision,       geodeticDatum = geodeticDatum,       gps_uncertainty = gps_uncertainty     )   ) # Load the sf object with the county shape files that include the country, # countryCode, stateProvince and county information for the area of interest data(\"county_tas\")  thylacine_data_d <-   dwc_country_to_county(     thylacine_data_c,     decimalLongitude = \"decimalLongitude\",     decimalLatitude = \"decimalLatitude\",     county_sf = county_tas,     country_column_name = \"country\",     countryCode_column_name = \"countryCode\",     stateProvince_column_name = \"stateProvince\",     county_column_name = \"county\"   ) # load localities data data(\"locality_data_aus\")  thylacine_data_e <-   thylacine_data_d |>   mutate(     locality = dwc_locality(       decimalLongitude = decimalLongitude,       decimalLatitude = decimalLatitude,       localities_sf = locality_data_aus,       localities_names = \"locality_name\"     )   )"},{"path":"https://jdberson.github.io/dwcPrepare/articles/dwcPrepare.html","id":"location-terms-with-one-function","dir":"Articles","previous_headings":"Darwin Core Location terms","what":"Location terms with one function","title":"dwcPrepare","text":"final dataframe , thylacine_data_e, includes Darwin Core Location fields: decimalLatitude, decimalLongitude, geodeticDatum, coordinateUncertaintyInMeters, coordinatePrecision, verbatimLatitude, verbatimLongitude, verbatimCoordinateSystem, verbatimSRS, country, countryCode, stateProvince, county locality. Rather generating terms step--step, can use wrapper function dwc_Location() everything one step: Much easier!","code":"thylacine_data_location <-   thylacine_data |>   mutate(     dwc_Location(       longitude = longitude_ddm,       latitude = latitude_ddm,       verbatimCoordinateSystem = \"degrees decimal minutes\",       verbatimSRS = \"EPSG:4326\",       gps_uncertainty = gps_uncertainty,       localities_sf = locality_data_aus,       localities_names = \"locality_name\",       county_sf = county_tas     )   )"},{"path":"https://jdberson.github.io/dwcPrepare/articles/dwcPrepare.html","id":"darwin-core-event-terms","dir":"Articles","previous_headings":"","what":"Darwin Core Event terms","title":"dwcPrepare","text":"single function Darwin Core Event terms: dwc_Event(). lubridate R package already includes many functions can used calculate Darwin Core Event terms. dwc_Event() provides wrapper series lubridate functions, experienced R users may prefer use lubridate functions directly (found dwc_Event() slow large datasets). Darwin Core terms returned dwc_Event() : eventDate, startDayOfYear, endDayOfYear, year, month, day, verbatimEventDate, optionally fieldNumber, habitat, samplingProtocol, samplingEffort, fieldNotes eventRemarks. start end date/date-time supplied function also return: sampleSizeValue, sampleSizeUnit. example, using thylacine_data()","code":"thylacine_data_event <-   thylacine_data |>   mutate(     dwc_Event(       start = date_trap_setup,       end = date_trap_collected,       tzone = \"Australia/Hobart\",       samplingEffort = \"1 trap\"     )   )"},{"path":"https://jdberson.github.io/dwcPrepare/articles/dwcPrepare.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"dwcPrepare","text":"Wieczorek C, J Wieczorek (2021) Georeferencing Calculator. Available: http://georeferencing.org/georefcalculator/gc.html. Accessed [2023-03-09].","code":""},{"path":"https://jdberson.github.io/dwcPrepare/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jacob Berson. Author, maintainer. Jake Manger. Author.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Berson J, Manger J (2023). dwcPrepare: Helps Prepare Data use Darwin Core Archive. https://github.com/jdberson/dwcPrepare, https://jdberson.github.io/dwcPrepare/.","code":"@Manual{,   title = {dwcPrepare: Helps Prepare Data for use in a Darwin Core Archive},   author = {Jacob Berson and Jake Manger},   year = {2023},   note = {https://github.com/jdberson/dwcPrepare, https://jdberson.github.io/dwcPrepare/}, }"},{"path":[]},{"path":"https://jdberson.github.io/dwcPrepare/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Helps Prepare Data for use in a Darwin Core Archive","text":"goal dwcPrepare make easier prepare biodiversity data use Darwin Core terms. can used generate Darwin Core Event Location terms data set submission service uses Darwin Core Archive (e.g. GBIF ALA). users established data processing pipelines, useful utility functions likely dwc_coordinateUncertaintyInMeters(), name suggests, calculates coordinateUncertaintyInMeters, dwc_locality() function provides text Darwin Core locality term.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helps Prepare Data for use in a Darwin Core Archive","text":"can install development version dwcPrepare GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"jdberson/dwcPrepare\")"},{"path":"https://jdberson.github.io/dwcPrepare/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Helps Prepare Data for use in a Darwin Core Archive","text":"functions package start dwc_ prefix, generally followed name Darwin Core field. example, dwc_coordinateUncertaintyInMeters() calculate value Darwin Core coordinateUncertaintyInMeters field. Exceptions rule utility functions (dwc_format_gco(), dwc_point_cluster() dwc_polygon_cluster()) function returns multiple Darwin Core fields (dwc_coordinates(), dwc_country_to_county(), dwc_Event() dwc_Location()). dwc_Event() dwc_Location() functions provide wrappers can used dplyr::mutate() generate Darwin Core Event Location terms supported dwcPrepare. example, using toy dataset comes shipped package: See vignette(\"dwcPrepare\") help getting started.","code":"# Load packages library(\"dwcPrepare\") library(\"dplyr\") library(\"tibble\")  # Load data data(\"thylacine_data\")  # Use dplyr::mutate() with dwc_Event() to generate Darwin Core Event fields thylacine_data |>   mutate(     dwc_Event(       start = date_trap_setup,       end = date_trap_collected,       tzone = \"Australia/Hobart\",       samplingEffort = \"1 trap\"     )   )  # Use dplyr::mutate() with dwc_Location() to generate Darwin Core Location fields thylacine_data |>   mutate(     dwc_Location(       longitude = longitude_dd,       latitude = latitude_dd,       verbatimCoordinateSystem = \"decimal degrees\",       verbatimSRS = \"EPSG:4326\",       gps_uncertainty = gps_uncertainty,       localities_sf = locality_data_aus,       localities_names = \"locality_name\",       county_sf = county_tas     )   )"},{"path":"https://jdberson.github.io/dwcPrepare/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Helps Prepare Data for use in a Darwin Core Archive","text":"package can cited : Berson J, Manger J (2023). dwcPrepare: Helps Prepare Data use Darwin Core Archive. R package version 0.0.0.9000, https://github.com/jdberson/dwcPrepare.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Helps Prepare Data for use in a Darwin Core Archive","text":"find error bug love hear ! Please let us know found creating issue https://github.com/jdberson/dwcPrepare/issues.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/county_tas.html","id":null,"dir":"Reference","previous_headings":"","what":"sf POLYGON object of local government areas on the main Tasmanian island — county_tas","title":"sf POLYGON object of local government areas on the main Tasmanian island — county_tas","text":"Polygons labels modified shape data provided Australian Bureau Statistics showing local government areas (Australian Darwin Core 'county' equivalent). Note polygons simplified reduce file size. data example use .","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/county_tas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sf POLYGON object of local government areas on the main Tasmanian island — county_tas","text":"","code":"county_tas"},{"path":"https://jdberson.github.io/dwcPrepare/reference/county_tas.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"sf POLYGON object of local government areas on the main Tasmanian island — county_tas","text":"sf object 27 features (rows) 4 fields (variables): country http://rs.tdwg.org/dwc/terms/country countryCode http://rs.tdwg.org/dwc/terms/countryCode stateProvince http://rs.tdwg.org/dwc/terms/stateProvince county http://rs.tdwg.org/dwc/terms/county geometry simple feature geometries","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/crs_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for semi-major axis and ellipsoid flattening for EPSG codes — crs_data","title":"Data for semi-major axis and ellipsoid flattening for EPSG codes — crs_data","text":"Calculating coordinate precision uncertainty requires values semi-major axis ellipsoid flattening specified coordinate reference system. data generated using st_crs extract semi-major axis ellipsoid flattening values EPSG codes.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/crs_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for semi-major axis and ellipsoid flattening for EPSG codes — crs_data","text":"","code":"crs_data"},{"path":"https://jdberson.github.io/dwcPrepare/reference/crs_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for semi-major axis and ellipsoid flattening for EPSG codes — crs_data","text":"data frame 869 rows 4 variables: epsg_code EPSG code coordinate reference system name Name coordinate reference system semi_major_axis radius equator given datum inverse_flattening inverse flattening component datum","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwcPrepare-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dwcPrepare: Helps Prepare Data for use in a Darwin Core Archive — dwcPrepare-package","title":"dwcPrepare: Helps Prepare Data for use in a Darwin Core Archive — dwcPrepare-package","text":"package helps take data frame contains data geographic coordinates, date/date-time species abundances, transforms data ready use Darwin Core archive.","code":""},{"path":[]},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwcPrepare-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dwcPrepare: Helps Prepare Data for use in a Darwin Core Archive — dwcPrepare-package","text":"Maintainer: Jacob Berson jacob.berson@uwa.edu.au (ORCID) Authors: Jake Manger jake.manger@uwa.edu.au (ORCID)","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_Event.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Darwin Core Event fields — dwc_Event","title":"Prepare Darwin Core Event fields — dwc_Event","text":"function takes start date/date-time well optional end date/date-time main arguments produces Darwin Core Event terms. start end given length time event took place assigned sampleSizeValue field. one start end values time component, values treated dates. dwc_Event essentially wrapper series lubridate functions, experienced R users may prefer use lubridate functions directly.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_Event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Darwin Core Event fields — dwc_Event","text":"","code":"dwc_Event(   start,   end = NA,   time_NA_value = \"00:00:00\",   tzone = \"UTC\",   sampleSizeUnit = \"day\",   fieldNumber = NA,   habitat = NA,   samplingProtocol = NA,   samplingEffort = NA,   fieldNotes = NA,   eventRemarks = NA )"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_Event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Darwin Core Event fields — dwc_Event","text":"start start date date-time sampling event. Accepts character strings dates one following formats: \"dmy HMS\" (eg, \"24/12/2012 15:45:00\"), \"ymd HMS\" (eg, \"2012-12-24 15:45:00\"), \"dmy\" (eg, \"24/12/2012\") \"ymd\" (eg, \"2012-12-24\"). end end date date-time sampling event. Default NA. time_NA_value mixture dates/date-times occur, dates without times often assigned time 00:00:00. default value , used eventDate field shown correctly. suggest cautious changing default. tzone timezone date-time passed parse_date_time. default \"UTC\". sampleSizeUnit unit time calculating length event. Passed time_length unit argument. default \"day\". fieldNumber Optional argument included fieldNumber term. Default NA. habitat Optional argument included habitat term. Default NA. samplingProtocol Optional argument included samplingProtocol term. Default NA. samplingEffort Optional argument included samplingEffort term. Default NA. fieldNotes Optional argument included fieldNotes term. Default NA. eventRemarks Optional argument included eventRemarks term. Default NA.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_Event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Darwin Core Event fields — dwc_Event","text":"tibble Darwin Core terms fieldNumber (supplied), eventDate, startDayOfYear, endDayOfYear, year, month, day, verbatimEventDate, habitat (supplied), samplingProtocol (supplied), sampleSizeValue (given length time event, given start end given), sampleSizeUnit (given start end given), samplingEffort (supplied), fieldNotes (supplied) eventRemarks (supplied).","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_Event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Darwin Core Event fields — dwc_Event","text":"","code":"# For a single start and a single end date-time: dwc_Event(start = \"2012-12-24 15:00:00\", end = \"2012-12-27 16:00:00\") #> # A tibble: 1 × 9 #>   eventDate      startDayOfYear endDayOfYear  year month   day verbatimEventDate #>   <chr>                   <dbl>        <dbl> <dbl> <dbl> <int> <chr>             #> 1 2012-12-24T15…            359          362  2012    12    24 2012-12-24 15:00… #> # ℹ 2 more variables: sampleSizeValue <dbl>, sampleSizeUnit <chr>  # The returned tibble will be added to an existing dataframe if combined with #  dplyr's mutate, for example:  # Load data data(\"thylacine_data\")  # Use dwc_Event withe dplyr::mutate() thylacine_data |>   dplyr::mutate(dwc_Event(     start = date_trap_setup,     end = date_trap_collected   )) #> # A tibble: 8 × 22 #>   site   trap     date_trap_setup   date_trap_collected longitude_dd latitude_dd #>   <chr>  <chr>    <chr>             <chr>                      <dbl>       <dbl> #> 1 Sumac  Sumac 1  05/09/2022 10:32… 06/09/2022 12:24:00         145.       -41.2 #> 2 Sumac  Sumac 2  05/09/2022 12:15… 06/09/2022 14:57:00         145.       -41.2 #> 3 Sumac  Sumac 1  05/10/2022 08:23… 06/10/2022 0:00:00          145.       -41.2 #> 4 Sumac  Sumac 2  05/10/2022 10:14… 06/10/2022 10:29:00         145.       -41.2 #> 5 Picton Picton 1 10/09/2022 10:32… 11/09/2022 12:24:00         147.       -43.3 #> 6 Picton Picton 2 10/09/2022 12:15… 11/09/2022 14:57:00         147.       -43.2 #> 7 Picton Picton 1 10/10/2022 0:00:… 11/10/2022 08:46:00         147.       -43.3 #> 8 Picton Picton 2 10/10/2022 10:14… 11/10/2022 10:29:00         147.       -43.2 #> # ℹ 16 more variables: longitude_dms <chr>, latitude_dms <chr>, #> #   longitude_ddm <chr>, latitude_ddm <chr>, gps_uncertainty <dbl>, #> #   species <chr>, count <dbl>, eventDate <chr>, startDayOfYear <dbl>, #> #   endDayOfYear <dbl>, year <dbl>, month <dbl>, day <int>, #> #   verbatimEventDate <chr>, sampleSizeValue <dbl>, sampleSizeUnit <chr>"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_Location.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Darwin Core Location fields — dwc_Location","title":"Prepare Darwin Core Location fields — dwc_Location","text":"function takes data frame point locations longitude latitude returns Darwin Core Location fields decimalLatitude, decimalLongitude, geodeticDatum, coordinateUncertaintyInMeters, coordinatePrecision, verbatimLatitude, verbatimLongitude, verbatimCoordinateSystem, verbatimSRS optionally country, countryCode, stateProvince, county locality.function wrapper dwcPrepare functions dwc_coordinates, dwc_coordinatePrecision, dwc_coordinateUncertaintyInMeters, dwc_country_to_county dwc_locality. help pages functions details.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_Location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Darwin Core Location fields — dwc_Location","text":"","code":"dwc_Location(   longitude,   latitude,   verbatimCoordinateSystem,   verbatimSRS,   gps_uncertainty = 30,   localities_sf = NULL,   localities_names = NULL,   county_sf = NULL )"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_Location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Darwin Core Location fields — dwc_Location","text":"longitude longitude given coordinates assigned verbatimLongitude returned tibble. Accepted formats \"decimal degrees\", \"degrees decimal minutes\" \"degrees minutes seconds\" Must character value coordinates degrees decimal minutes degrees minutes seconds. latitude latitude given coordinates assigned verbatimLatitude returned tibble. Accepted formats \"decimal degrees\", \"degrees decimal minutes\" \"degrees minutes seconds\" Must character value coordinates degrees decimal minutes degrees minutes seconds. verbatimCoordinateSystem format longitude latitude coordinates. Supported terms \"decimal degrees\", \"degrees decimal minutes\" \"degrees minutes seconds\". See: http://rs.tdwg.org/dwc/terms/verbatimCoordinateSystem verbatimSRS spatial reference system associated coordinates, given EPSG code example: \"EPSG:4326\". See: http://rs.tdwg.org/dwc/terms/verbatimSRS. gps_uncertainty uncertainty meters recorded GPS device. Default 30. localities_sf optional sf POINT object provides locality names well longitude latitude localities within area interest. package includes locality information Australia. See locality_data_aus. provided, dwc_locality field returned. Default NULL. localities_names column name localities_sf gives locality name. Given string. county_sf optional sf POLYGON object includes county boundaries along higher geography features. Column names must match Darwin Core terms country, countryCode, stateProvince county. provided, Darwin Core terms returned location. Default NULL.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_Location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Darwin Core Location fields — dwc_Location","text":"tibble Darwin Core terms decimalLatitude, decimalLongitude, geodeticDatum, coordinateUncertaintyInMeters, coordinatePrecision, verbatimLatitude, verbatimLongitude, verbatimCoordinateSystem, verbatimSRS optionally country, countryCode, stateProvince, county locality.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_Location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Darwin Core Location fields — dwc_Location","text":"","code":"library(\"dplyr\") #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  data(\"thylacine_data\") data(\"locality_data_aus\") data(\"county_tas\")  thylacine_data |>   mutate(dwc_Location(     longitude = longitude_dd,     latitude = latitude_dd,     verbatimCoordinateSystem = \"decimal degrees\",     verbatimSRS = \"EPSG:4326\",     gps_uncertainty = gps_uncertainty,     localities_sf = locality_data_aus,     localities_names = \"locality_name\",     county_sf = county_tas   )) #> # A tibble: 8 × 27 #>   site   trap     date_trap_setup   date_trap_collected longitude_dd latitude_dd #>   <chr>  <chr>    <chr>             <chr>                      <dbl>       <dbl> #> 1 Sumac  Sumac 1  05/09/2022 10:32… 06/09/2022 12:24:00         145.       -41.2 #> 2 Sumac  Sumac 2  05/09/2022 12:15… 06/09/2022 14:57:00         145.       -41.2 #> 3 Sumac  Sumac 1  05/10/2022 08:23… 06/10/2022 0:00:00          145.       -41.2 #> 4 Sumac  Sumac 2  05/10/2022 10:14… 06/10/2022 10:29:00         145.       -41.2 #> 5 Picton Picton 1 10/09/2022 10:32… 11/09/2022 12:24:00         147.       -43.3 #> 6 Picton Picton 2 10/09/2022 12:15… 11/09/2022 14:57:00         147.       -43.2 #> 7 Picton Picton 1 10/10/2022 0:00:… 11/10/2022 08:46:00         147.       -43.3 #> 8 Picton Picton 2 10/10/2022 10:14… 11/10/2022 10:29:00         147.       -43.2 #> # ℹ 21 more variables: longitude_dms <chr>, latitude_dms <chr>, #> #   longitude_ddm <chr>, latitude_ddm <chr>, gps_uncertainty <dbl>, #> #   species <chr>, count <dbl>, country <chr>, countryCode <chr>, #> #   stateProvince <chr>, county <chr>, locality <chr>, decimalLatitude <dbl>, #> #   decimalLongitude <dbl>, geodeticDatum <chr>, #> #   coordinateUncertaintyInMeters <dbl>, coordinatePrecision <dbl>, #> #   verbatimLatitude <dbl>, verbatimLongitude <dbl>, …"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinatePrecision.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the coordinatePrecision in degrees for geographic coordinates — dwc_coordinatePrecision","title":"Calculate the coordinatePrecision in degrees for geographic coordinates — dwc_coordinatePrecision","text":"function calculates precision geographic coordinates.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinatePrecision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the coordinatePrecision in degrees for geographic coordinates — dwc_coordinatePrecision","text":"","code":"dwc_coordinatePrecision(   verbatimLongitude,   verbatimLatitude,   verbatimCoordinateSystem )"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinatePrecision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the coordinatePrecision in degrees for geographic coordinates — dwc_coordinatePrecision","text":"verbatimLongitude Output dwc_coordinates. See: http://rs.tdwg.org/dwc/terms/verbatimLongitude. verbatimLatitude Output dwc_coordinates. See: http://rs.tdwg.org/dwc/terms/verbatimLatitude. verbatimCoordinateSystem format longitude latitude coordinates. Supported terms \"decimal degrees\", \"degrees decimal minutes\" \"degrees minutes seconds\". See: http://rs.tdwg.org/dwc/terms/verbatimCoordinateSystem","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinatePrecision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the coordinatePrecision in degrees for geographic coordinates — dwc_coordinatePrecision","text":"numeric. value can used Darwin Core coordinatePrecision field. See: http://rs.tdwg.org/dwc/terms/coordinatePrecision. maximum precision returned 0.00001 degrees, approximately 1.11 m equator.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinatePrecision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the coordinatePrecision in degrees for geographic coordinates — dwc_coordinatePrecision","text":"","code":"# For a single point dwc_coordinatePrecision(144.9786, -41.17472,   verbatimCoordinateSystem = \"decimal degrees\" ) #> [1] 1e-05  # For a set of points data(\"thylacine_data\") thylacine_data |>   dplyr::mutate(     coordinatePrecision =       dwc_coordinatePrecision(         verbatimLatitude = latitude_dd,         verbatimLongitude = longitude_dd,         verbatimCoordinateSystem = \"decimal degrees\"       )   ) #> # A tibble: 8 × 14 #>   site   trap     date_trap_setup   date_trap_collected longitude_dd latitude_dd #>   <chr>  <chr>    <chr>             <chr>                      <dbl>       <dbl> #> 1 Sumac  Sumac 1  05/09/2022 10:32… 06/09/2022 12:24:00         145.       -41.2 #> 2 Sumac  Sumac 2  05/09/2022 12:15… 06/09/2022 14:57:00         145.       -41.2 #> 3 Sumac  Sumac 1  05/10/2022 08:23… 06/10/2022 0:00:00          145.       -41.2 #> 4 Sumac  Sumac 2  05/10/2022 10:14… 06/10/2022 10:29:00         145.       -41.2 #> 5 Picton Picton 1 10/09/2022 10:32… 11/09/2022 12:24:00         147.       -43.3 #> 6 Picton Picton 2 10/09/2022 12:15… 11/09/2022 14:57:00         147.       -43.2 #> 7 Picton Picton 1 10/10/2022 0:00:… 11/10/2022 08:46:00         147.       -43.3 #> 8 Picton Picton 2 10/10/2022 10:14… 11/10/2022 10:29:00         147.       -43.2 #> # ℹ 8 more variables: longitude_dms <chr>, latitude_dms <chr>, #> #   longitude_ddm <chr>, latitude_ddm <chr>, gps_uncertainty <dbl>, #> #   species <chr>, count <dbl>, coordinatePrecision <dbl>"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinateUncertaintyInMeters.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the coordinateUncertaintyInMeters — dwc_coordinateUncertaintyInMeters","title":"Calculate the coordinateUncertaintyInMeters — dwc_coordinateUncertaintyInMeters","text":"function calculates uncertainty meters associated given set geographic coordinates. uncertainty sum two parts: uncertainty associated coordinate precision given datum latitude. calculated following equations found : http://georeferencing.org/georefcalculator/docs/GeorefGuide.html#imprecision_in_coordinates. coordinate reference system unknown, default value 5,359 meters assigned component. See Details. uncertainty associated GPS recording device. default given 30 meters.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinateUncertaintyInMeters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the coordinateUncertaintyInMeters — dwc_coordinateUncertaintyInMeters","text":"","code":"dwc_coordinateUncertaintyInMeters(   decimalLatitude,   coordinatePrecision,   geodeticDatum,   gps_uncertainty = 30 )"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinateUncertaintyInMeters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the coordinateUncertaintyInMeters — dwc_coordinateUncertaintyInMeters","text":"decimalLatitude Output dwc_coordinates. Latitude decimal degrees. See: http://rs.tdwg.org/dwc/terms/decimalLatitude. coordinatePrecision Output dwc_coordinatePrecision. precision coordinates degrees. Value must 0.00001 1. See: http://rs.tdwg.org/dwc/terms/coordinatePrecision. geodeticDatum Output dwc_coordinates. spatial reference system associated coordinates given EPSG code example: \"EPSG:4326\". See: http://rs.tdwg.org/dwc/terms/geodeticDatum. gps_uncertainty uncertainty meters recorded GPS device. Default 30.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinateUncertaintyInMeters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the coordinateUncertaintyInMeters — dwc_coordinateUncertaintyInMeters","text":"numeric. value can used Darwin Core coordinateUncertaintyInMeters field.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinateUncertaintyInMeters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the coordinateUncertaintyInMeters — dwc_coordinateUncertaintyInMeters","text":"Please see, Wieczorek C, J Wieczorek (2021) Georeferencing Calculator. Available:  http://georeferencing.org/georefcalculator/gc.html options details. uncertainty associated geographic coordinates unknown datum taken https://docs.gbif-uat.org/georeferencing-best-practices/1.0/en/#uncertainty--unknown-datum. Note worst-case scenario whilst function lacks ability correctly determine uncertainty unknown datum. small number locations unknown datum, recommend using Wieczorek C, J Wieczorek (2021) Georeferencing Calculator. output calculator can copied R using dwc_format_gco.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinateUncertaintyInMeters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the coordinateUncertaintyInMeters — dwc_coordinateUncertaintyInMeters","text":"","code":"dwc_coordinateUncertaintyInMeters(-41.17472, 0.01, \"EPSG:4326\", 30) #> [1] 1422"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare geographic coordinates and convert to decimal degrees if needed — dwc_coordinates","title":"Prepare geographic coordinates and convert to decimal degrees if needed — dwc_coordinates","text":"function prepares raw (verbatim) coordinate information necessary, converts coordinates 'degrees minutes seconds' 'degrees decimal minutes' 'decimal degrees' using R package parzer. longitude latitude provided decimal degrees, function round maximum seven decimal places.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare geographic coordinates and convert to decimal degrees if needed — dwc_coordinates","text":"","code":"dwc_coordinates(longitude, latitude, verbatimCoordinateSystem, verbatimSRS)"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare geographic coordinates and convert to decimal degrees if needed — dwc_coordinates","text":"longitude longitude given coordinates assigned verbatimLongitude returned tibble. Accepted formats \"decimal degrees\", \"degrees decimal minutes\" \"degrees minutes seconds\" Must character value coordinates degrees decimal minutes degrees minutes seconds. latitude latitude given coordinates assigned verbatimLatitude returned tibble. Accepted formats \"decimal degrees\", \"degrees decimal minutes\" \"degrees minutes seconds\" Must character value coordinates degrees decimal minutes degrees minutes seconds. verbatimCoordinateSystem format longitude latitude coordinates. Supported terms \"decimal degrees\", \"degrees decimal minutes\" \"degrees minutes seconds\". See: http://rs.tdwg.org/dwc/terms/verbatimCoordinateSystem verbatimSRS spatial reference system associated coordinates, given EPSG code example: \"EPSG:4326\". See: http://rs.tdwg.org/dwc/terms/verbatimSRS.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare geographic coordinates and convert to decimal degrees if needed — dwc_coordinates","text":"tibble Darwin Core terms decimalLatitude, decimalLongitude, geodeticDatum, verbatimLatitude, verbatimLongitude, verbatimCoordinateSystem verbatimSRS.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare geographic coordinates and convert to decimal degrees if needed — dwc_coordinates","text":"","code":"data(\"thylacine_data\") thylacine_data |>   dplyr::mutate(     dwc_coordinates(       longitude = longitude_dms,       latitude = latitude_dms,       verbatimCoordinateSystem = \"degrees minutes seconds\",       verbatimSRS = \"EPSG:4326\"     )   ) #> # A tibble: 8 × 20 #>   site   trap     date_trap_setup   date_trap_collected longitude_dd latitude_dd #>   <chr>  <chr>    <chr>             <chr>                      <dbl>       <dbl> #> 1 Sumac  Sumac 1  05/09/2022 10:32… 06/09/2022 12:24:00         145.       -41.2 #> 2 Sumac  Sumac 2  05/09/2022 12:15… 06/09/2022 14:57:00         145.       -41.2 #> 3 Sumac  Sumac 1  05/10/2022 08:23… 06/10/2022 0:00:00          145.       -41.2 #> 4 Sumac  Sumac 2  05/10/2022 10:14… 06/10/2022 10:29:00         145.       -41.2 #> 5 Picton Picton 1 10/09/2022 10:32… 11/09/2022 12:24:00         147.       -43.3 #> 6 Picton Picton 2 10/09/2022 12:15… 11/09/2022 14:57:00         147.       -43.2 #> 7 Picton Picton 1 10/10/2022 0:00:… 11/10/2022 08:46:00         147.       -43.3 #> 8 Picton Picton 2 10/10/2022 10:14… 11/10/2022 10:29:00         147.       -43.2 #> # ℹ 14 more variables: longitude_dms <chr>, latitude_dms <chr>, #> #   longitude_ddm <chr>, latitude_ddm <chr>, gps_uncertainty <dbl>, #> #   species <chr>, count <dbl>, decimalLatitude <dbl>, decimalLongitude <dbl>, #> #   geodeticDatum <chr>, verbatimLatitude <chr>, verbatimLongitude <chr>, #> #   verbatimCoordinateSystem <chr>, verbatimSRS <chr>"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_country_to_county.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign country, countryCode, stateProvince and county to point locations — dwc_country_to_county","title":"Assign country, countryCode, stateProvince and county to point locations — dwc_country_to_county","text":"Takes data frame point locations decimal degrees, sf POLYGON object county  boundaries uses st_join assign country, countryCode, stateProvince county Darwin Core terms point location.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_country_to_county.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign country, countryCode, stateProvince and county to point locations — dwc_country_to_county","text":"","code":"dwc_country_to_county(   df,   decimalLongitude,   decimalLatitude,   county_sf,   country_column_name = \"country\",   countryCode_column_name = \"countryCode\",   stateProvince_column_name = \"stateProvince\",   county_column_name = \"county\" )"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_country_to_county.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign country, countryCode, stateProvince and county to point locations — dwc_country_to_county","text":"df data frame containing decimal longitude latitude coordinates decimalLongitude longitude focal point decimal degrees. Output dwc_coordinates. See: http://rs.tdwg.org/dwc/terms/decimalLongitude. decimalLatitude latitude focal point decimal degrees. Output dwc_coordinates. See: http://rs.tdwg.org/dwc/terms/decimalLatitude. county_sf sf POLYGON object includes county boundaries along higher geography features. country_column_name column name county_sf gives name country county found. default value \"country\". countryCode_column_name column name county_sf gives countryCode country county found. default value \"countryCode\". stateProvince_column_name column name county_sf gives State Province county found. default value \"stateProvince\". county_column_name column name county_sf gives county name. default value \"county\".","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_country_to_county.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign country, countryCode, stateProvince and county to point locations — dwc_country_to_county","text":"original df object additional columns country, countryCode, stateProvince county.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_country_to_county.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign country, countryCode, stateProvince and county to point locations — dwc_country_to_county","text":"Note function expects county nested within stateProvince turn nested within country. sf POLYGON object county boundaries contain features describing higher level geographies.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_country_to_county.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign country, countryCode, stateProvince and county to point locations — dwc_country_to_county","text":"","code":"# Make up some point data point_locations <- data.frame(   name = c(\"A\", \"B\", \"C\"),   lon = c(117.093225, 127.502052, 115.674972),   lat = c(-33.110168, -25.128663, -33.982473) )  # Make up some county polygon data nested within higher geographies county_sf <-   sf::st_buffer(sf::st_as_sf(point_locations,     coords = c(\"lon\", \"lat\"),     remove = FALSE,     crs = sf::st_crs(\"EPSG:4326\")   ), dist = 1000) |>   dplyr::mutate(     country_raw = c(\"Country 1\", \"Country 2\", \"Country 3\"),     countryCode_raw = c(\"C1\", \"C2\", \"C3\"),     stateProvince_raw = c(\"State 1\", \"State 2\", \"State 3\"),     county_raw = c(\"County 1\", \"County 2\", \"County 3\")   )  # Run the function dwc_country_to_county(   df = point_locations,   decimalLongitude = \"lon\",   decimalLatitude = \"lat\",   county_sf = county_sf,   country_column_name = \"country_raw\",   countryCode_column_name = \"countryCode_raw\",   stateProvince_column_name = \"stateProvince_raw\",   county_column_name = \"county_raw\" ) #>   name      lon       lat   country countryCode stateProvince   county #> 1    A 117.0932 -33.11017 Country 1          C1       State 1 County 1 #> 2    B 127.5021 -25.12866 Country 2          C2       State 2 County 2 #> 3    C 115.6750 -33.98247 Country 3          C3       State 3 County 3"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_format_gco.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the output of http://georeferencing.org/georefcalculator/gc.html — dwc_format_gco","title":"Format the output of http://georeferencing.org/georefcalculator/gc.html — dwc_format_gco","text":"online georeferencingcalculator allows results output selecting 'Copy' pasted spreadsheet. function takes output argument formats tibble.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_format_gco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the output of http://georeferencing.org/georefcalculator/gc.html — dwc_format_gco","text":"","code":"dwc_format_gco(location_identifier, georeference_calculator_output)"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_format_gco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the output of http://georeferencing.org/georefcalculator/gc.html — dwc_format_gco","text":"location_identifier name location. Used returned tibble can joined data. georeference_calculator_output output georeferencing calculator http://georeferencing.org/georefcalculator/gc.html.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_format_gco.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the output of http://georeferencing.org/georefcalculator/gc.html — dwc_format_gco","text":"tibble. Column names Darwin Core terms.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_format_gco.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the output of http://georeferencing.org/georefcalculator/gc.html — dwc_format_gco","text":"","code":"# Note that the georeference_calculator_output has been truncated for this # example dwc_format_gco(   location_identifier = \"A\",   georeference_calculator_output =     \"10.27  -123.6  WGS84  1557  0.0000001  JB  2022-08-31  Georeferencing...\" ) #> # A tibble: 1 × 9 #>   location_identifier decimalLatitude decimalLongitude geodeticDatum #>   <chr>                         <dbl>            <dbl> <chr>         #> 1 A                              10.3            -124. WGS84         #> # ℹ 5 more variables: coordinateUncertaintyInMeters <dbl>, #> #   coordinatePrecision <dbl>, georeferencedBy <chr>, gereferenceDate <chr>, #> #   georeferenceProtocol <chr>"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_locality.html","id":null,"dir":"Reference","previous_headings":"","what":"Locality descriptor for given longitude/latitude coordinates — dwc_locality","title":"Locality descriptor for given longitude/latitude coordinates — dwc_locality","text":"function finds closest locality given point location, well distance direction focal location. returned string used Darwin Core locality field.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_locality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locality descriptor for given longitude/latitude coordinates — dwc_locality","text":"","code":"dwc_locality(   decimalLongitude,   decimalLatitude,   localities_sf,   localities_names,   ... )"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_locality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locality descriptor for given longitude/latitude coordinates — dwc_locality","text":"decimalLongitude longitude focal point decimal degrees. Output dwc_coordinates. See: http://rs.tdwg.org/dwc/terms/decimalLongitude. decimalLatitude latitude focal point decimal degrees. Output dwc_coordinates. See: http://rs.tdwg.org/dwc/terms/decimalLatitude. localities_sf sf POINT object provides locality names well longitude latitude localities within area interest. package includes locality information Australia. See locality_data_aus localities_names column name localities_sf gives locality name. ... Additional arguments passed st_distance","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_locality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locality descriptor for given longitude/latitude coordinates — dwc_locality","text":"string used Darwin Core locality field, http://rs.tdwg.org/dwc/terms/locality.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_locality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locality descriptor for given longitude/latitude coordinates — dwc_locality","text":"","code":"localities_sf <-   sf::st_as_sf(     data.frame(       name = c(\"A\", \"B\", \"C\"),       lon = c(117.093225, 127.502052, 115.674972),       lat = c(-33.110168, -25.128663, -33.982473)     ),     coords = c(\"lon\", \"lat\"),     crs = sf::st_crs(\"EPSG:4326\")   )   dwc_locality(   decimalLongitude = 115.949465,   decimalLatitude = -32.029655,   localities_sf = localities_sf,   localities_names = \"name\" ) #> [1] \"161 km SE A\""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_point_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster a set of geographic coordinates (longitude, latitude) — dwc_point_cluster","title":"Cluster a set of geographic coordinates (longitude, latitude) — dwc_point_cluster","text":"function uses distm create distance matrix hclust cutree assign point cluster.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_point_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster a set of geographic coordinates (longitude, latitude) — dwc_point_cluster","text":"","code":"dwc_point_cluster(   df,   longitude,   latitude,   distm_method = geosphere::distHaversine,   hclust_method = \"average\",   k = NULL,   h = NULL )"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_point_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster a set of geographic coordinates (longitude, latitude) — dwc_point_cluster","text":"df data frame object. longitude name column df containing longitude values. latitude name column df containing latitude values. distm_method method passed distm calculating distance points. hclust_method method passed hclust performing hierarchical clustering. k number desired groups passed cutree. h distance cutoff passed cutree.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_point_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster a set of geographic coordinates (longitude, latitude) — dwc_point_cluster","text":"data frame new column cluster shows cluster point assigned .","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_point_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster a set of geographic coordinates (longitude, latitude) — dwc_point_cluster","text":"","code":"df <-   data.frame(     longitude = c(116.018, 116.010, 116.011, 115.969, 115.976, 115.973),     latitude = c(-31.709, -31.707, -31.713, -32.339, -32.339, -32.344)   )  dwc_point_cluster(   df = df,   longitude = \"longitude\",   latitude = \"latitude\",   hclust_method = \"average\",   h = 5000 ) #> [1] \"Making distance matrix - this can be slow\" #> [1] \"Performing hierarchical clustering\" #>   longitude latitude cluster #> 1   116.018  -31.709       1 #> 2   116.010  -31.707       1 #> 3   116.011  -31.713       1 #> 4   115.969  -32.339       2 #> 5   115.976  -32.339       2 #> 6   115.973  -32.344       2"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_polygon_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Find polygons (sites) that intersect — dwc_polygon_cluster","title":"Find polygons (sites) that intersect — dwc_polygon_cluster","text":"function identifies polygons intersect way. main use identify sites within data set cover similar area, considered single site. cluster identifier (.cluster) assigned polygon, intersecting polygons identified common .cluster id.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_polygon_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find polygons (sites) that intersect — dwc_polygon_cluster","text":"","code":"dwc_polygon_cluster(x)"},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_polygon_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find polygons (sites) that intersect — dwc_polygon_cluster","text":"x sf object contains site locations polygons.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_polygon_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find polygons (sites) that intersect — dwc_polygon_cluster","text":"x additional column .cluster.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/dwc_polygon_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find polygons (sites) that intersect — dwc_polygon_cluster","text":"","code":"data(\"thylacine_data\")  # Generate some interseting polygons thylacine_polygons <-   thylacine_data |>   dplyr::group_by(trap) |>   dplyr::slice(1) |>   sf::st_as_sf(coords = c(\"longitude_dd\", \"latitude_dd\"), crs = \"EPSG:4326\") |>   sf::st_buffer(dist = 5000) |>   dplyr::select(site, trap, geometry) |>   dplyr::ungroup()  # Run function dwc_polygon_cluster(thylacine_polygons) #> Simple feature collection with 4 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 144.9178 ymin: -43.30659 xmax: 146.766 ymax: -41.12926 #> Geodetic CRS:  WGS 84 #> # A tibble: 4 × 4 #>   site   trap                                                  geometry .cluster #> * <chr>  <chr>                                            <POLYGON [°]>    <int> #> 1 Picton Picton 1 ((146.6416 -43.26181, 146.641 -43.26223, 146.6414 -4…        2 #> 2 Picton Picton 2 ((146.6377 -43.24986, 146.6372 -43.2503, 146.6385 -4…        2 #> 3 Sumac  Sumac 1  ((144.9433 -41.21162, 144.944 -41.21187, 144.9447 -4…        1 #> 4 Sumac  Sumac 2  ((144.929 -41.22172, 144.9284 -41.22212, 144.9292 -4…        1"},{"path":"https://jdberson.github.io/dwcPrepare/reference/locality_data_aus.html","id":null,"dir":"Reference","previous_headings":"","what":"sf POINT object of Australian localities — locality_data_aus","title":"sf POINT object of Australian localities — locality_data_aus","text":"Data \"Elvis - Place Names - Foundation Spatial Data - Locality Data\", sourced Commonwealth Australia (Intergovernmental Committee Surveying Mapping, ICSM) 2018, Creative Commons Attribution 4.0 International license. See https://placenames.fsdf.org.au/. Note data received subset NAME field geometry column retained sf object. NAME original data renamed locality_name.","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/locality_data_aus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sf POINT object of Australian localities — locality_data_aus","text":"","code":"locality_data_aus"},{"path":"https://jdberson.github.io/dwcPrepare/reference/locality_data_aus.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"sf POINT object of Australian localities — locality_data_aus","text":"sf object 16197 features (rows) 1 fields (variables): locality_name name locality geometry simple feature geometries","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/thylacine_data.html","id":null,"dir":"Reference","previous_headings":"","what":"A made-up survey data set for use in examples and vignettes — thylacine_data","title":"A made-up survey data set for use in examples and vignettes — thylacine_data","text":"Tasmanian Tigers (Thylacinus cynocephalus) rumoured still roam wilds Tasmania. 'mock' dataset survey Tasmanian Tigers. Sadly tigers caught!","code":""},{"path":"https://jdberson.github.io/dwcPrepare/reference/thylacine_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A made-up survey data set for use in examples and vignettes — thylacine_data","text":"","code":"thylacine_data"},{"path":"https://jdberson.github.io/dwcPrepare/reference/thylacine_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A made-up survey data set for use in examples and vignettes — thylacine_data","text":"data frame 8 rows 13 variables: site name given site trap two traps site, 1 2 date_trap_setup date time trap setup date_trap_collected date time trap collected longitude_dd longitude trap decimal degrees latitude_dd latitude trap decimal degrees longitude_dms longitude trap degrees minutes seconds latitude_dms latitude trap degrees minutes seconds longitude_ddm longitude trap degrees decimal minutes latitude_ddm latitude trap degrees decimal minutes gps_uncertainty uncertainty coordinates given GPS species species identified / counted count number individuals found trap","code":""},{"path":"https://jdberson.github.io/dwcPrepare/news/index.html","id":"dwcprepare-0009000","dir":"Changelog","previous_headings":"","what":"dwcPrepare 0.0.0.9000","title":"dwcPrepare 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
